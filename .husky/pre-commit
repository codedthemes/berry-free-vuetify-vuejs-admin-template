# -----------------------
# COLOR DEFINITIONS
# -----------------------
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
CYAN='\033[1;36m'
BOLD='\033[1m'
RESET='\033[0m'

# -----------------------
# UTILITY FUNCTIONS
# -----------------------
print_section() {
  echo -e "\n${BOLD}${BLUE}⧉ $1${RESET}"
}

print_success() {
  echo -e "${GREEN}✔ $1${RESET}"
}

print_warning() {
  echo -e "${YELLOW}⚠ $1${RESET}"
}

print_error() {
  echo -e "${RED}✖ $1${RESET}"
}

print_info() {
  echo -e "${CYAN}→ $1${RESET}"
}

# -----------------------
# HOOK STARTS HERE
# -----------------------

# Get staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)
ROOT_DIR=$(git rev-parse --show-toplevel)
ANY_PROJECT_FAILED=0

run_project_checks() {
  print_section "Checking ${$ROOT_DIR}/"

  if [ ! -d "$ROOT_DIR" ]; then
    print_warning "Directory '$ROOT_DIR' not found. Skipping..."
    return 0
  fi

  (
    cd "$ROOT_DIR" || exit 1

    if [ ! -f "package-lock.json" ]; then
      print_error "'package-lock.json' not found in $ROOT_DIR. Run 'npm install'."
      exit 1
    fi

    print_info "Running lint-staged..."
    if ! npm exec lint-staged -- --config "$ROOT_DIR/.lintstagedrc"; then
      print_error "lint-staged failed in $ROOT_DIR."
      exit 1
    else
      print_success "lint-staged passed"
    fi

    print_info "Running build..."
    if ! npm run build; then
      print_error "Build failed in $ROOT_DIR."
      exit 1
    else
      print_success "Build passed"
    fi
  )

  if [ $? -ne 0 ]; then
    ANY_PROJECT_FAILED=1
  fi
}

# -----------------------
# PROCESS EACH PROJECT
# -----------------------
if echo "$STAGED_FILES" | grep -q "^/"; then
  run_project_checks "free-version"
fi

# -----------------------
# FINAL RESULT
# -----------------------
echo ""
if [ "$ANY_PROJECT_FAILED" -eq 1 ]; then
  print_error "Pre-commit hook failed. Commit aborted."
  exit 1
else
  print_success "Pre-commit hook passed. All checks successful."
fi
